--- module_mp_morr_two_moment.f90	2014-10-19 14:21:53.000000000 -0600
+++ module_mp_morr_two_moment_dj.f90	2014-10-19 22:04:12.000000000 -0600
@@ -74,13 +74,13 @@
 ! CLOUD DROPLETS, CLOUD (SMALL) ICE, RAIN, SNOW, AND GRAUPEL.
 
 MODULE MODULE_MP_MORR_TWO_MOMENT
-   USE     module_wrf_error
-   USE module_utility, ONLY: WRFU_Clock, WRFU_Alarm  ! GT
-   USE module_domain, ONLY : HISTORY_ALARM, Is_alarm_tstep  ! GT
-   USE module_mp_radar
+!d   USE     module_wrf_error
+!d   USE module_utility, ONLY: WRFU_Clock, WRFU_Alarm  ! GT
+!d   USE module_domain, ONLY : HISTORY_ALARM, Is_alarm_tstep  ! GT
+!d   USE module_mp_radar
 
 ! USE WRF PHYSICS CONSTANTS
-  use module_model_constants, ONLY: CP, G, R => r_d, RV => r_v, EP_2
+!d  use module_model_constants, ONLY: CP, G, R => r_d, RV => r_v, EP_2
 
 !  USE module_state_description
 
@@ -92,9 +92,10 @@
    PUBLIC  ::  MP_MORR_TWO_MOMENT
    PUBLIC  ::  POLYSVP
 
-   PRIVATE :: GAMMA, DERF1
-   PRIVATE :: PI, SQRTPI
-   PRIVATE :: MORR_TWO_MOMENT_MICRO
+   PUBLIC :: GAMMA, DERF1
+   PUBLIC :: PI, SQRTPI
+   PUBLIC :: MORR_TWO_MOMENT_MICRO
+   PUBLIC :: MORR_TWO_MOMENT_INIT
 
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 ! SWITCHES FOR MICROPHYSICS SCHEME
@@ -165,9 +166,10 @@
 
      REAL, PRIVATE ::      AI,AC,AS,AR,AG ! 'A' PARAMETER IN FALLSPEED-DIAM RELATIONSHIP
      REAL, PRIVATE ::      BI,BC,BS,BR,BG ! 'B' PARAMETER IN FALLSPEED-DIAM RELATIONSHIP
-!     REAL, PRIVATE ::      R           ! GAS CONSTANT FOR AIR
-!     REAL, PRIVATE ::      RV          ! GAS CONSTANT FOR WATER VAPOR
-!     REAL, PRIVATE ::      CP          ! SPECIFIC HEAT AT CONSTANT PRESSURE FOR DRY AIR
+     REAL, PRIVATE ::      R           ! GAS CONSTANT FOR AIR
+     REAL, PRIVATE ::      RV          ! GAS CONSTANT FOR WATER VAPOR
+     REAL, PRIVATE ::      CP          ! SPECIFIC HEAT AT CONSTANT PRESSURE FOR DRY AIR
+     REAL, PRIVATE ::      EP_2
      REAL, PRIVATE ::      RHOSU       ! STANDARD AIR DENSITY AT 850 MB
      REAL, PRIVATE ::      RHOW        ! DENSITY OF LIQUID WATER
      REAL, PRIVATE ::      RHOI        ! BULK DENSITY OF CLOUD ICE
@@ -183,7 +185,7 @@
      REAL, PRIVATE ::      F2S         ! VENTILATION PARAMETER FOR SNOW
      REAL, PRIVATE ::      F1R         ! VENTILATION PARAMETER FOR RAIN
      REAL, PRIVATE ::      F2R         ! VENTILATION PARAMETER FOR RAIN
-!     REAL, PRIVATE ::      G           ! GRAVITATIONAL ACCELERATION
+     REAL, PRIVATE ::      G           ! GRAVITATIONAL ACCELERATION
      REAL, PRIVATE ::      QSMALL      ! SMALLEST ALLOWED HYDROMETEOR MIXING RATIO
      REAL, PRIVATE ::      CI,DI,CS,DS,CG,DG ! SIZE DISTRIBUTION PARAMETERS FOR CLOUD ICE, SNOW, GRAUPEL
      REAL, PRIVATE ::      EII         ! COLLECTION EFFICIENCY, ICE-ICE COLLISIONS
@@ -229,6 +231,13 @@
      REAL, PRIVATE :: CONS31,CONS32,CONS33,CONS34,CONS35,CONS36,CONS37,CONS38,CONS39,CONS40
      REAL, PRIVATE :: CONS41
 
+!d dodalam
+     REAL, DIMENSION(4), PUBLIC:: xcre, xcse, xcge, xcrg, xcsg, xcgg
+     REAL, PUBLIC:: xam_r, xbm_r, xmu_r, xobmr
+     REAL, PUBLIC:: xam_s, xbm_s, xmu_s, xoams, xobms, xocms
+     REAL, PUBLIC:: xam_g, xbm_g, xmu_g, xoamg, xobmg, xocmg
+     REAL, PUBLIC:: xorg2, xosg2, xogg2
+
 
 CONTAINS
 
@@ -357,9 +366,10 @@
          END IF
 
 ! CONSTANTS AND PARAMETERS
-!         R = 287.15
-!         RV = 461.5
-!         CP = 1005.
+         R = 287.15
+         RV = 461.5
+         EP_2 = R/RV
+         CP = 1005.
          RHOSU = 85000./(287.15*273.15)
          RHOW = 997.
          RHOI = 500.
@@ -381,7 +391,7 @@
 !         F2R = 0.32
 ! fix 053011
          F2R = 0.308
-!         G = 9.806
+         G = 9.806
          QSMALL = 1.E-14
          EII = 0.1
          ECI = 0.7
@@ -521,7 +531,7 @@
          xbm_g = DG
          xmu_g = 0.
 
-         call radar_init
+!d         call radar_init
 !+---+-----------------------------------------------------------------+
 
 
@@ -4558,49 +4568,49 @@
 !.. routines).
 !+---+-----------------------------------------------------------------+
 
-      if (melti .and. k_0.ge.kts+1) then
-       do k = k_0-1, kts, -1
+!d      if (melti .and. k_0.ge.kts+1) then
+!d       do k = k_0-1, kts, -1
 
 !..Reflectivity contributed by melting snow
-          if (L_qs(k) .and. L_qs(k_0) ) then
-           fmelt_s = MAX(0.005d0, MIN(1.0d0-rs(k)/rs(k_0), 0.99d0))
-           eta = 0.d0
-           lams = 1./ilams(k)
-           do n = 1, nrbins
-              x = xam_s * xxDs(n)**xbm_s
-              call rayleigh_soak_wetgraupel (x,DBLE(xocms),DBLE(xobms), &
-                    fmelt_s, melt_outside_s, m_w_0, m_i_0, lamda_radar, &
-                    CBACK, mixingrulestring_s, matrixstring_s,          &
-                    inclusionstring_s, hoststring_s,                    &
-                    hostmatrixstring_s, hostinclusionstring_s)
-              f_d = N0_s(k)*xxDs(n)**xmu_s * DEXP(-lams*xxDs(n))
-              eta = eta + f_d * CBACK * simpson(n) * xdts(n)
-           enddo
-           ze_snow(k) = SNGL(lamda4 / (pi5 * K_w) * eta)
-          endif
+!d          if (L_qs(k) .and. L_qs(k_0) ) then
+!d           fmelt_s = MAX(0.005d0, MIN(1.0d0-rs(k)/rs(k_0), 0.99d0))
+!d           eta = 0.d0
+!d           lams = 1./ilams(k)
+!d           do n = 1, nrbins
+!d              x = xam_s * xxDs(n)**xbm_s
+!d              call rayleigh_soak_wetgraupel (x,DBLE(xocms),DBLE(xobms), &
+!d                    fmelt_s, melt_outside_s, m_w_0, m_i_0, lamda_radar, &
+!d                    CBACK, mixingrulestring_s, matrixstring_s,          &
+!d                    inclusionstring_s, hoststring_s,                    &
+!d                    hostmatrixstring_s, hostinclusionstring_s)
+!d              f_d = N0_s(k)*xxDs(n)**xmu_s * DEXP(-lams*xxDs(n))
+!d              eta = eta + f_d * CBACK * simpson(n) * xdts(n)
+!d           enddo
+!d           ze_snow(k) = SNGL(lamda4 / (pi5 * K_w) * eta)
+!d          endif
 
 
 !..Reflectivity contributed by melting graupel
 
-          if (L_qg(k) .and. L_qg(k_0) ) then
-           fmelt_g = MAX(0.005d0, MIN(1.0d0-rg(k)/rg(k_0), 0.99d0))
-           eta = 0.d0
-           lamg = 1./ilamg(k)
-           do n = 1, nrbins
-              x = xam_g * xxDg(n)**xbm_g
-              call rayleigh_soak_wetgraupel (x,DBLE(xocmg),DBLE(xobmg), &
-                    fmelt_g, melt_outside_g, m_w_0, m_i_0, lamda_radar, &
-                    CBACK, mixingrulestring_g, matrixstring_g,          &
-                    inclusionstring_g, hoststring_g,                    &
-                    hostmatrixstring_g, hostinclusionstring_g)
-              f_d = N0_g(k)*xxDg(n)**xmu_g * DEXP(-lamg*xxDg(n))
-              eta = eta + f_d * CBACK * simpson(n) * xdtg(n)
-           enddo
-           ze_graupel(k) = SNGL(lamda4 / (pi5 * K_w) * eta)
-          endif
+!d          if (L_qg(k) .and. L_qg(k_0) ) then
+!d           fmelt_g = MAX(0.005d0, MIN(1.0d0-rg(k)/rg(k_0), 0.99d0))
+!d           eta = 0.d0
+!d           lamg = 1./ilamg(k)
+!d           do n = 1, nrbins
+!d              x = xam_g * xxDg(n)**xbm_g
+!d              call rayleigh_soak_wetgraupel (x,DBLE(xocmg),DBLE(xobmg), &
+!d                    fmelt_g, melt_outside_g, m_w_0, m_i_0, lamda_radar, &
+!d                    CBACK, mixingrulestring_g, matrixstring_g,          &
+!d                    inclusionstring_g, hoststring_g,                    &
+!d                    hostmatrixstring_g, hostinclusionstring_g)
+!d              f_d = N0_g(k)*xxDg(n)**xmu_g * DEXP(-lamg*xxDg(n))
+!d              eta = eta + f_d * CBACK * simpson(n) * xdtg(n)
+!d           enddo
+!d           ze_graupel(k) = SNGL(lamda4 / (pi5 * K_w) * eta)
+!d          endif
 
-       enddo
-      endif
+!d       enddo
+!d      endif
 
       do k = kte, kts, -1
          dBZ(k) = 10.*log10((ze_rain(k)+ze_snow(k)+ze_graupel(k))*1.d18)
